// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO refresh_tokens(token, user_id, revoked_at, expires_at, created_at, updated_at)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateTokenParams struct {
	Token     string       `json:"token"`
	UserID    uuid.UUID    `json:"user_id"`
	RevokedAt sql.NullTime `json:"revoked_at"`
	ExpiresAt time.Time    `json:"expires_at"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.Token,
		arg.UserID,
		arg.RevokedAt,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT token, user_id, expires_at, revoked_at, created_at, updated_at FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens SET revoked_at = $1, updated_at = $2 WHERE token = $3
`

type RevokeTokenParams struct {
	RevokedAt sql.NullTime `json:"revoked_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	Token     string       `json:"token"`
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.RevokedAt, arg.UpdatedAt, arg.Token)
	return err
}
